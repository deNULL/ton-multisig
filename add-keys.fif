#!/usr/bin/env fift -s
"multisig-utils.fif" include

{ ."<wallet> <keyname-1> <keyname-2>... [-O <output-boc>] [-k <k>]" cr
  ."Loads init message from '<wallet>-init-query.boc' and adds specified keys to it." cr
  ."Use -k option to override the k param (minimal number of signatures required to complete an order)."
} : usage()

// == Parsing command-line arguments

variable Keynames
{
  "-O" "--output-file" 1 { =: SaveFile } option-long()
  "-K" 1 { parse-int =: NewK } option()
  1 { =: BaseFile } nth-argument()

  {
    Keynames @ cons Keynames !
    drop
  } other-argument()
} scan-args()

2 < { // Checks that there's enough arguments
  show-usage()
} if

// == End of parsing command-line arguments

."Loading init message from " BaseFile +"-init-query.boc" type cr cr

BaseFile +"-init-query.boc" file>B B>boc parse-external-message()
drop =: OldStateInit drop =: WorkchainId

// Update StateInit
OldStateInit untriple =: WalletLibs =: OldWalletData =: WalletCode

OldWalletData parse-data() drop =: OldOwners =: OldK =: OldN drop drop

// Default values
BaseFile =:? SaveFile
OldK =:? NewK

// Generating list of owners
OldOwners OldN Keynames @ reverse-list() { dup null? not } {
  // owners_dict key_index keynames_list
  uncons swap +".pk" load-generate-keypair
  // 2dup .", keys: 0x" Bx. ." (priv), 0x" Bx. ." (pub)" cr
  // owners_dict key_index arg_index pubkey privkey
  def? PrimaryPrivateKey {
    drop
  } { // no need for this key anymore
    =: PrimaryPrivateKey
    dup =: PrimaryPublicKey
  } cond
  <b
    3 pick 8 u, 
    swap 256 B>u@
    // owners_dict key_index arg_index pubkey builder
    4 roll
    // udict requires order: value(builder) key(pubkey) dict(owners) n=256
  2dup 256 udict@ ~ // check if already added
  {
    drop nip nip -rot // duplicate, noop
  } {
    256 b>udict!
    0= abort"Unable to store public key in the contract data"
    // key_index arg_index owners_dict
    rot 1+ rot
  } cond
} while
drop // arg_index not needed
=: NewN =: NewOwners

0 0 NewN NewK NewOwners null data() =: NewWalletData
."WalletData: " NewWalletData <s csr. cr

WalletCode NewWalletData WalletLibs state-init() =: StateInit
."StateInit: " StateInit <s csr. cr

WorkchainId StateInit hashu 2constant WalletAddr
."Updated wallet address = " WalletAddr .addr cr
WalletAddr SaveFile +".addr" save-address-verbose

."Non-bounceable address (for init): " WalletAddr 7 .Addr cr
."Bounceable address (for later access): " WalletAddr 6 .Addr cr

0 -1 PrimaryPublicKey empty-message() =: WalletMessageBody
."Signing message: " WalletMessageBody <s csr. cr

WalletAddr StateInit
  WalletMessageBody PrimaryPrivateKey sign-message()
external-message() =: ExtMessage

."External message for initialization is " ExtMessage <s csr. cr
ExtMessage 2 boc+>B dup Bx. cr
SaveFile +"-init-query.boc" tuck B>file
."(Saved wallet creating query to file " type .")" cr