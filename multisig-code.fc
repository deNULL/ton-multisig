;; Multi-signature wallet smart contract

;; Missing from stblib.fc
(cell, int) udict_delete?(cell dict, int key_len, int index) asm(index dict key_len) "DICTUDEL";

tuple request_tuple(int hash, int seqno, int expiry, int mode, int sigcount, int signatures, cell message)
  asm(hash seqno expiry mode sigcount signatures message) "7 TUPLE";


() recv_internal(slice in_msg) impure {
  ;; do nothing for internal messages
}

() recv_external(slice in_msg) impure {
   ;; usual signature, seqno, expiry date
  var signature = in_msg~load_bits(512);
  var cs = in_msg;
  var (msg_seqno, valid_until) = (cs~load_uint(32), cs~load_uint(32));
  throw_if(35, valid_until < now());

  ;; pubkey of the person who signed this message
  ;; should be included in the list of allowed keys (within this wallet data)
  var signatory_pubkey = cs~load_uint(256);

  var ds = get_data().begin_parse();
  ;; seqno,
  ;; number of requests pending,
  ;; total number of stored keys, 
  ;; required number of signatures to complete signature
  var (stored_seqno, pending_count, param_n, param_k) =
    (ds~load_uint(32), ds~load_uint(16), ds~load_uint(8), ds~load_uint(8));

  throw_unless(33, msg_seqno == stored_seqno);
  throw_unless(34, check_signature(slice_hash(in_msg), signature, signatory_pubkey));

  ;; dict of {stored pubkey => #key},
  ;; dict of {#request => request},
  var (owners, pending) = (ds~load_dict(), ds~load_dict());
  ds.end_parse();

  ;; validate that signatory_pubkey is among stored keys
  var (owner, owner_found) = owners.udict_get?(256, signatory_pubkey);
  throw_unless(35, owner_found);

  accept_message();

  ;; iterate over pending requests and delete all expired ones
  ifnot (pending.null?()) {
    var req_hash = -1;
    var l = nil;
    var f = 0;
    do {
      (req_hash, var request, f) = pending.udict_get_next?(256, req_hash);
      if (f) {
        var (_, req_expiry) = (
          request~load_uint(32),
          request~load_uint(32)
        );
        if (req_expiry < now()) {
          l = cons(req_hash, l);
        }
      }
    } until (~ f);

    ifnot (l.null?()) {
      do {
        pending~udict_delete?(256, l~list_next());
      } until (l.null?());

      ;; without this the code above compiles into UNTILEND and breaks
      f = 1;
    }
  }

  ;; process new request
  while (cs.slice_refs()) {
    int hash_only = cs~load_uint(1);
    cell req_body = cs~load_ref();
    cell req_new_signs = cs~load_dict();

    int req_hash = 0;
    if (hash_only) {
      ;; this request was stored before, so we provided only its hash instead of the whole body
      slice req_body_slice = req_body.begin_parse();
      req_hash = req_body_slice~load_uint(256);
    } else {
      req_hash = cell_hash(req_body);
    }

    ;; check if this request is already pending
    (slice req_data, int found) = pending.udict_get?(256, req_hash);

    ifnot (found) {
      ;; we provided only the hash, but the body was not found among pending requests
      ;; (already completed/expired?)
      throw_if(37, hash_only);

      ;; load data from the message instead of storage
      req_data = req_body.begin_parse();
    }

    (int req_seqno, int req_expiry, int req_mode, cell req_message) = (
      req_data~load_uint(32),
      req_data~load_uint(32),
      req_data~load_uint(8),
      req_data~load_ref()
    );

    int req_sigcount = 0;
    int req_signatures = 0;
    if (found) {
      (req_sigcount, req_signatures) = (req_data~load_uint(8), req_data~load_uint(param_n));
    } else {
      ;; validate expiry
      throw_if(36, req_expiry < now());

      ;; request should contain actual seqno of this contract,
      ;; but it's valid only when the first batch of signatures arrive
      ;; (it cannot increase, because it's included in signed part,
      ;; and after the first accepted message it won't be equal to the contract's seqno)
      throw_unless(38, req_seqno == stored_seqno);
      pending_count += 1;
    }


    ;; merge new signatures into req_signs
    int pubkey = (1 << 255) + ((1 << 255) - 1);
    do {
      ;; on the first iteration include the person who signed the whole current request
      ;; (so we don't necessarily have to include his signature in the message)
      int owner_idx = owner~load_uint(8);
      int owner_mask = 1 << owner_idx;

      ;; check that this request was not signed by this owner previously
      ;; (to prevent adding same signature over and over again)
      ifnot (req_signatures & owner_mask) {
        req_sigcount += 1;
        req_signatures = req_signatures | owner_mask;
      }

      (pubkey, var sign, var f) = req_new_signs.udict_get_prev?(256, pubkey);
      if (f) {
        (owner, owner_found) = owners.udict_get?(256, pubkey);
        ;; this signature does not belong to any owner
        throw_unless(39, owner_found);

        ;; check that signature is valid
        var req_signature = sign~load_bits(512);
        throw_unless(40, check_signature(req_hash, req_signature, pubkey));
      }
    } until (~ f);

    if (req_sigcount >= param_k) {
      ;; enough signatures to send this message
      send_raw_message(req_message, req_mode);

      ;; make sure it's removed
      pending~udict_delete?(256, req_hash);
    } else {
      ;; store message as pending request
      pending~udict_set_builder(256, req_hash, begin_cell()
        .store_uint(req_seqno, 32)
        .store_uint(req_expiry, 32)
        .store_uint(req_mode, 8)
        .store_uint(req_sigcount, 8)
        .store_uint(req_signatures, param_n)
        .store_ref(req_message));
    }
  }
  cs.end_parse();

  set_data(
    begin_cell()
      .store_uint(stored_seqno + 1, 32)
      .store_uint(pending_count, 16)
      .store_uint(param_n, 8)
      .store_uint(param_k, 8)
      .store_dict(owners)
      .store_dict(pending)
    .end_cell()
  );
}

;; Returns current sequence number

int seqno() method_id {
  return get_data().begin_parse().preload_uint(32);
}