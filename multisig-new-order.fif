#!/usr/bin/env fift -s
"multisig-utils.fif" include

{ ."<basename> <dest-addr> <seqno> <amount> <keyindex-1> <keyindex-2>... [-B <body-boc>] [-O <output-boc>]" cr
  ."Creates a request to a multisig wallet created by multisig-init.fif, with address loaded from file <basename>.addr "
  ."and private keys from <basename>-<keyindex-N>.pk, and saves it into <output-boc>.boc ('ms-wallet-query.boc' by default)." cr
  ."Note that <keyindex-N> are indices of the private keys (in range 1..n), separated by spaces."
} : usage()

5 1000 check-arg-count()

true =: BounceFlag
-1 =: ReqValidUntil
3 =: SendMode

$1 =: BaseFile
$2 BounceFlag parse-load-address =: BounceFlag 2=: DestAddr
$3 parse-int =: SeqNo
$4 $>GR =: Amount

BaseFile +".addr" load-address
2dup 2constant WalletAddr
."Source wallet address = " 2dup .addr cr 6 .Addr cr

$#
dup 1- $() ="-O" {
  dup $() =: SaveFile
  2 -
} if
dup 1- $() ="-B" {
  dup $() =: BodyFile
  2 -
} if
dup 1- $() ="-O" { // Double check needed if order was "... -O savefile -B body-boc"
  dup $() =: SaveFile
  2 -
} if

// Load keypairs specified in command line
null swap
{
  dup 5 >=
} { // keypairs i
  dup BaseFile +"-" swap $() $+ +".pk" load-keypair
  // keypairs i pubkey privkey
  def? PrimaryPublicKey {
    2dup
    =: PrimaryPrivateKey
    =: PrimaryPublicKey
  } ifnot
  swap
  3 roll
  cons cons
  swap 1-
} while
drop
=: Keypairs

PrimaryPrivateKey drop

def? BodyFile {
  @' BodyFile file>B B>boc
} {
  <b 0 32 u, "TEST" $, b>
} cond =: TransferBody

def? SaveFile {
  "ms-wallet-query" =: SaveFile
} ifnot

."Creating new order to transfer " Amount .GR ."to account " DestAddr 2dup BounceFlag 7 + .Addr ." = " .addr 
."seqno=0x" SeqNo x. ."bounce=" BounceFlag . cr
."Body of transfer message is " TransferBody <s csr. cr
  
// Create actual message to be sent when the order will be completed
<b
  b{01} s, BounceFlag 1 i, b{000100} s, DestAddr addr, Amount Gram, 0 9 64 32 + + 1+ u, 
  TransferBody <s 2dup s-fits? not rot over 1 i, -rot { drop TransferBody ref, } { s, } cond
b> =: IntMessage

// Pack the internal message into a request data structure to be signed
SeqNo ReqValidUntil SendMode IntMessage order-request() =: Request

."Signing order request: " Request <s csr. cr

WalletAddr null
  SeqNo -1 PrimaryPublicKey 0 Request Keypairs order-message() PrimaryPrivateKey sign-message()
external-message() =: ExtMessage

."New order external message: " ExtMessage <s csr. cr
ExtMessage 2 boc+>B dup Bx. cr
SaveFile +".boc" tuck B>file
."(Saved to file " type .")" cr