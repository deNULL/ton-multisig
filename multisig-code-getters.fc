;; These are useful methods, however they take precious bytes of storage.
;; It's still possible to call them w/o uploading to TON.

;; Returns number of pending requests

int pending_count() method_id {
  return get_data().begin_parse().skip_bits(32).preload_uint(16);
}

;; Returns n (total number of owners)

int param_n() method_id {
  return get_data().begin_parse().skip_bits(48).preload_uint(8);
}

;; Returns k (number of signatures required to send a message)

int param_k() method_id {
  return get_data().begin_parse().skip_bits(56).preload_uint(8);
}

;; Returns list of all owners

_ owners() method_id {
  var ds = get_data().begin_parse();
  var (stored_seqno, pending_count, param_n, param_k) =
    (ds~load_uint(32), ds~load_uint(16), ds~load_uint(8), ds~load_uint(8));
  var owners = ds~load_dict();

  var l = nil;
  var pubkey = (1 << 255) + ((1 << 255) - 1);
  do {
    (pubkey, var owner, var f) = owners.udict_get_prev?(256, pubkey);
    if (f) {
      l = cons(pair(pubkey, owner.preload_uint(8)), l);
    }
  } until (~ f);
  return l;
}

;; Returns list of all pending requests

_ pending() method_id {
  var ds = get_data().begin_parse();
  var (stored_seqno, pending_count, param_n, param_k) =
    (ds~load_uint(32), ds~load_uint(16), ds~load_uint(8), ds~load_uint(8));
  var (owners, pending) = (ds~load_dict(), ds~load_dict());
  if (pending.null?()) {
    return nil;
  }

  var l = nil;
  var req_hash = (1 << 255) + ((1 << 255) - 1);
  do {
    (req_hash, var request, var f) = pending.udict_get_prev?(256, req_hash);
    if (f) {
      var (req_seqno, req_expiry, req_mode, req_sigcount, req_signatures, req_message) = (
        request~load_uint(32),
        request~load_uint(32),
        request~load_uint(8),
        request~load_uint(8),
        request~load_uint(param_n),
        request~load_ref()
      );
      l = cons(request_tuple(req_hash, req_seqno, req_expiry, req_mode, req_sigcount, req_signatures, req_message), l);
    }
  } until (~ f);
  return l;
}

;; Returns all pending requests that are signed or not signed by a specific owner

_ pending_signed_by(int signatory_pubkey, int filter_signed) method_id {
  var ds = get_data().begin_parse();
  var (stored_seqno, pending_count, param_n, param_k) =
    (ds~load_uint(32), ds~load_uint(16), ds~load_uint(8), ds~load_uint(8));
  var (owners, pending) = (ds~load_dict(), ds~load_dict());
  var (owner, owner_found) = owners.udict_get?(256, signatory_pubkey);
  ;; ifnot (owner_found) {
  ;;  return nil;
  ;;}
  throw_unless(36, owner_found);

  if (pending.null?()) {
    return nil;
  }

  var l = nil;
  var req_hash = (1 << 255) + ((1 << 255) - 1);
  var owner_idx = owner~load_uint(8);
  var owner_mask = 1 << owner_idx;
  do {
    (req_hash, var request, var f) = pending.udict_get_prev?(256, req_hash);
    if (f) {
      var (req_seqno, req_expiry, req_mode, req_sigcount, req_signatures, req_message) = (
        request~load_uint(32),
        request~load_uint(32),
        request~load_uint(8),
        request~load_uint(8),
        request~load_uint(param_n),
        request~load_ref()
      );
      var sign_found = (req_signatures & owner_mask) != 0;

      if (filter_signed == sign_found) {
        l = cons(request_tuple(req_hash, req_seqno, req_expiry, req_mode, req_sigcount, req_signatures, req_message), l);
      }
    }
  } until (~ f);
  return l;
}