#!/usr/bin/env fift -s
"multisig-utils.fif" include

{ ."<query-boc>" cr
  ."Displays data and list of signatures in a prepared query to a multisig wallet."
} : usage()

1 1 check-arg-count()

."Loading message from " $1 type cr cr

$1 file>B B>boc parse-external-message()
=: MessageBody =: StateInit 2=: Addr

."dst_addr:     " Addr .addr cr cr

."StateInit:" cr
StateInit .dump cr cr

MessageBody parse-order-message()

// sig seqno valid_until last_pubkey hash_only? request signatures

5 roll                     ."seqno:        " . cr
4 roll                     ."valid_until:  " . cr
3 roll                     ."last pubkey:  " x. cr
rot =: HashOnly

HashOnly null? {
  cr ."(no request attached)" cr
} {
  HashOnly                 ."hash_only?    " { ."true" } { ."false" } cond cr cr

                           ."request:" cr
  swap HashOnly {
                                    ."  →  req_hash: " . cr
  } {
    <s 
      32 u@+ swap                   ."  ┌  req_seqno:       " . cr
      32 u@+ swap                   ."  │  req_valid_until: " . cr
      8 u@+  swap                   ."  │  req_mode:        " . cr
      ref@+                         ."  │  req_message:     " cr
      dup hash =: ReqHash
      <s
        2 u@+ nip
        1 i@+ swap                  ."  │    bounce?        " dup =: BounceFlag { ."true" } { ."false" } cond cr
        6 u@+ nip
        8 i@+ 256 u@+ -rot          ."  │    dest_addr:     " 2dup @' BounceFlag 7 + .Addr ." = " .addr cr
        Gram@+ swap                 ."  │    amount:        " .GR cr
        9 64 32 + + 1+ u@+ nip
        1 i@+ swap {
          ref@+ <s
            dup sbits 8 / B@+ swap  ."  │    inner message: 0x" Bx. cr
          s>
        } {
          dup sbits 8 / B@+ swap    ."  │    inner message: " Bx. cr
        } cond
      s>                            ."  └→ (req_hash:       " @' ReqHash x. .")" cr
    s>
  } cond

  cr ."signatures:" cr
  256 { 
    swap                          ."  pubkey:  " x. cr
    drop -1
  } dictforeach
  drop
} cond