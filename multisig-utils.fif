"common-utils.fif" include

// initial-data()
// (n k -- cell)

{
  <b
    0 32 u,               // seqno
    0 16 u,               // pending#
    rot dup 3 -roll 8 u,  // n
    swap 8 u,             // k
    // Generating list of owners
    0 dictnew {
      over <b swap 8 u, // Saving index to builder
      @' FileBase +"-" 3 pick 1 + (.) $+ +".pk" load-generate-keypair // Loading/saving pubkey and privkey
        // .s -> data:builder index:int keylist:dict builder pubkey:bytes privkey:bytes
       
      // if index == 0, this is the key we will sign our message with
      4 pick 0 = {
        =: PrimaryPrivateKey
        dup =: PrimaryPublicKey
      } {
        drop
      } cond
      256 B>u@ // Converting pubkey to int
        // udict requires order: value(builder) key(pubkey) dict(keylist) n=256
      rot 256 .s b>udict!
      0= abort"Unable to store public key in the contract data"
        // .s -> data:builder index:int keylist:dict
      swap 1+ swap
    } 4 roll times
    swap drop
    dict,             // owners
    null dict,        // pending
  b>
} : initial-data()

// empty-message()
// (seqno valid_until public_key -- slice)
//
// Builds an empty (with no requests) message body, returning it as a Cell.

{
  <b
    3 roll 32 u, // seqno, initially 0
    rot 32 i,    // valid_until
    swap B,      // public_key
  b>
} : empty-message()

// order-request()
// (req_seqno req_valid_until req_mode req_body -- cell)
//
// Packs an order into a cell. The actual message body to send is req_body.

{
  <b
    4 roll 32 u,
    3 roll 32 u,
    rot 8 u,
    swap ref,
  b>
} : order-request()

// order-message()
// (seqno valid_until public_key existing? request keypairs -- slice)
//
// Builds message containing an order for transfer, signing it by specified list of keys.
// If hash_only is true, stores only the hash of the request (for pending requests).

{
  <b
    // seqno valid_until public_key existing? request keypairs builderO
    6 roll 32 u,          // seqno, initially 0
    5 roll 32 i,          // valid_until
    4 roll B,             // public_key
    4 pick 1 i,           // existing?
    // existing? request keypairs builderO
    3 roll {
      rot hash tuck 
      // keypairs hash builderO hash
      256 u,              // hash(request)
    } {
      rot tuck ref,       // request
      // keypairs request builderO
      swap hash swap
    } cond
    // ...
    // -> keypairs hash builderO
    2 exch
    // builderO hash keypairs
    
    dictnew // -> builderO hash keypairs dict
      // cycle through keypairs, generate and store signatures
      { 
        swap null? not
      } { 
        uncons uncons -roll // -> builderO hash dict keypairs pubkey privkey

        <b // -> builderO hash dict keypairs pubkey privkey builderI
          6 pick 3 roll ed25519_sign_uint B, // <- hash privkey
          // -> builderO hash dict keypairs pubkey builderI
          swap
          3 roll
          256
          // <- builderI pubkey dict 256
        b>udict! // -> builderO hash keypairs dict ok?
        0= abort"Unable to store signature of this order" // -> dict
      } while
    nip dict,
  b>
} : order-message()

// sign-message()
// (message_body private_key -- slice)
//
// Attaches signature to a slice representing message body.

{
  dup hash rot ed25519_sign_uint
  <b
    swap B, swap <s s,
  b> <s
} : sign-message()