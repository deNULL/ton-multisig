#!/usr/bin/env fift -s
"multisig-utils.fif" include

{ ."<query1-boc> <query2-boc> <keyname> [-O <output-boc>] [-S <seqno>]" cr
  ."Merges signatures of two queries to a multisig wallet with the same bodies." cr
  ."Note that you need a valid key (in <keyname>.pk file) to perform this operation."
} : usage()

// == Parsing command-line arguments

{
  "-O" "--output-file" 1 { =: SaveFile } option-long()
  "-S" "--seqno" 1 { parse-int =: SeqNo } option-long()

  1 { =: BaseFile1 } nth-argument()
  2 { =: BaseFile2 } nth-argument()
  3 { =: Keyfile } nth-argument()
  no-more-arguments() // Prevents adding too much arguments
} scan-args()

3 < { // Checks that there's enough arguments
  show-usage()
} if

// == End of parsing command-line arguments

."Loading message from " BaseFile1 +".boc" type cr cr

BaseFile1 +".boc" file>B B>boc parse-external-message()
=: MessageBody1 =: StateInit1 2=: WalletAddr1

."dst_addr:     " WalletAddr1 .addr cr cr

StateInit1 null? not abort"Expected StateInit to be null"

MessageBody1 parse-order-message()

// sig seqno valid_until last_pubkey hash_only? request signatures

=: Signatures1 =: Request1 =: HashOnly1
drop // last_pubkey will be replaced
=: ValidUntil1 =: SeqNo1
drop // signature will be replaced

."Loading message from " BaseFile2 +".boc" type cr cr

BaseFile2 +".boc" file>B B>boc parse-external-message()
=: MessageBody2 =: StateInit2 2=: WalletAddr2

WalletAddr1 WalletAddr2
rot <> -rot <> or abort"Expected wallet addresses to be equal"

StateInit2 null? not abort"Expected StateInit to be null"

MessageBody2 parse-order-message()

// sig seqno valid_until last_pubkey hash_only? request signatures

=: Signatures2 =: Request2 =: HashOnly2
drop // last_pubkey will be replaced
=: ValidUntil2 =: SeqNo2
drop // signature will be replaced

SeqNo1 SeqNo2 max =:? SeqNo
BaseFile1 =:? SaveFile

ValidUntil1 ValidUntil2 max =: ValidUntil

HashOnly1 HashOnly2 or =: HashOnly

HashOnly1 { Request1 } { Request1 hashu } cond =: RequestHash1
HashOnly2 { Request2 } { Request2 hashu } cond =: RequestHash2

RequestHash1 RequestHash2 <> abort"Request hashes are different"

HashOnly { RequestHash1 } { Request1 } cond =: Request

Keyfile +".pk" load-keypair
=: PrimaryPrivateKey
=: PrimaryPublicKey

null
Signatures1 256 { 
  // signs signature privkey
  64 B@+ s>
  swap 256 u>B
  rot cons cons
  -1
} dictforeach
drop
Signatures2 256 { 
  // signs signature privkey
  64 B@+ s>
  swap 256 u>B
  rot cons cons
  -1
} dictforeach
drop
=: Keypairs

WalletAddr1 null
  SeqNo ValidUntil PrimaryPublicKey HashOnly Request Keypairs order-message() PrimaryPrivateKey sign-message()
external-message() =: ExtMessage

."Merged external message: " ExtMessage <s csr. cr
ExtMessage 2 boc+>B dup Bx. cr
SaveFile +".boc" tuck B>file
."(Saved to file " type .")" cr