#!/usr/bin/env fift -s
"multisig-utils.fif" include

{ ."<query-boc> <keyname-1> <keyname-2>... [-O <output-boc>] [-s <seqno>]" cr
  ."Appends new signatures to a (not yet sent) query to a multisig wallet." cr
  ."It's recommended to check that query is correct first via multisig-show-order.fif" cr
  ."If output file is omitted, adds signatures to the original file." cr
  ."Note that <keyname-N> is not the index of a private key, but its filename (without .pk extension)."
} : usage()

2 1000 check-arg-count()

$1 +".boc" =: QueryName

."Loading message from " QueryName type cr cr

QueryName file>B B>boc parse-external-message()
=: MessageBody =: StateInit 2=: WalletAddr

."dst_addr:     " WalletAddr .addr cr cr

StateInit null? not abort"Expected StateInit to be null"

MessageBody parse-order-message()

// sig seqno valid_until last_pubkey hash_only? request signatures

=: Signatures =: Request =: HashOnly
drop // last_pubkey will be replaced
=: ValidUntil =: SeqNo
drop // signature will be replaced

$#
dup 1- $() ="-O" {
  dup $() =: SaveFile
  2 -
} if

null
Signatures 256 { 
  // signs signature privkey
  64 B@+ s>
  swap 256 u>B
  rot cons cons
  -1
} dictforeach
drop


// Append keypairs specified in command line
swap
{
  dup 2 >=
} { // keypairs i
  dup swap $() +".pk" load-keypair
  // keypairs i pubkey privkey
  def? PrimaryPublicKey {
    2dup
    =: PrimaryPrivateKey
    =: PrimaryPublicKey
  } ifnot
  swap
  3 roll
  cons
  cons
  swap 1-
} while
drop
=: Keypairs

def? SaveFile {
  $1 =: SaveFile
} ifnot

."Signing order request: " Request <s csr. cr

WalletAddr null
  SeqNo ValidUntil PrimaryPublicKey HashOnly Request Keypairs order-message() PrimaryPrivateKey sign-message()
external-message() =: ExtMessage

."Updated external message: " ExtMessage <s csr. cr
ExtMessage 2 boc+>B dup Bx. cr
SaveFile +".boc" tuck B>file
."(Saved to file " type .")" cr