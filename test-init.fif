#!/usr/bin/env fift -s
"multisig-utils.fif" include

{ ."<n> [<k> <filename-base>] [-C <code-fif>]" cr
  ."Simulate creation of a multisig wallet locally."
} : usage()

1 3 check-arg-count()

$1 (number) 1- abort"n must be an integer number" =: n
def? $2 { @' $2 (number) 1- abort"k must be an integer number" } { n } cond =: k
def? $3 { @' $3 } { "new-ms-wallet" } cond =: FileBase

$#
dup 1- $() ="-C" {
  dup $() +".fif" include =: WalletCode
  2 -
} {
  // Import the actual smart contract code
  "multisig-code-getters.fif" include =: WalletCode
} cond

n k initial-data() =: WalletData

0 -1 PrimaryPublicKey empty-message() PrimaryPrivateKey sign-message() <s
  WalletCode WalletData recv_external runvm()

=: NewWalletData
=: ExitCode

."Exit code: " ExitCode . cr
."Updated data: " cr NewWalletData <s csr. cr

."Saving updated data to " FileBase +"-data-0.boc" type cr

NewWalletData 2 boc+>B FileBase +"-data-0.boc" B>file