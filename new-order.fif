#!/usr/bin/env fift -s
"multisig-utils.fif" include

{ ."<wallet> <dest-addr> <seqno> <amount> <keyname-1> <keyname-2>... [-B <body-boc>] [-O <output-boc>] [-T <seconds>] [-b] [-M <send-mode>]" cr
  ."Creates a request to a multisig wallet created by multisig-init.fif, with address loaded from file <wallet>.addr "
  ."and private keys from <keyname-i>.pk, and saves it into <output-boc>.boc ('<wallet>-query.boc' by default)." cr
  ."You can specify how many seconds this order will be alive after the -T flag. By default, it will live forever." cr
  ."Switch -b disables bounce flag (enabled by default), and option -M allows to set send mode for future message."
} : usage()

// == Parsing command-line arguments

variable Keynames
{
  "-B" "--body-file" 1 { =: BodyFile } option-long()
  "-O" "--output-file" 1 { =: SaveFile } option-long()
  "-T" "--timeout" 1 { parse-int now + =: ReqValidUntil } option-long()
  "-M" "--send-mode" 1 { parse-int =: SendMode } option-long()
  "-b" "--no-bounce" { false =: BounceFlag } switch-long()

  1 { =: BaseFile } nth-argument()
  2 { =: DestRaw } nth-argument()
  3 { parse-int =: SeqNo } nth-argument()
  4 { $>GR =: Amount } nth-argument()
  {
    Keynames @ cons Keynames !
    drop
  } other-argument()
} scan-args()
5 < { show-usage() } if // Checks that there's enough arguments

// == End of parsing command-line arguments

true =:? BounceFlag
3 =:? SendMode
DestRaw BounceFlag parse-load-address =: BounceFlag 2=: DestAddr
BaseFile +"-query" =:? SaveFile

def? BodyFile {
  @' BodyFile +".boc" file>B B>boc
} {
  <b 0 32 u, "TEST" $, b>
} cond =: TransferBody

BaseFile +".addr" load-address
2dup 2constant WalletAddr
."Source wallet address = " 2dup .addr cr 6 .Addr cr

// Load keypairs specified in command line
null Keynames @ reverse-list() { dup null? not } { // keypairs keynames
  uncons swap +".pk" load-keypair
  // keypairs i pubkey privkey
  def? PrimaryPublicKey {
    2dup
    =: PrimaryPrivateKey
    =: PrimaryPublicKey
  } ifnot
  swap
  3 roll
  cons cons
  swap
} while
drop
=: Keypairs

."Creating new order to transfer " Amount .GR ."to account " DestAddr 2dup BounceFlag 7 + .Addr ." = " .addr 
."seqno=0x" SeqNo x. ."bounce=" BounceFlag . cr

def? ReqValidUntil {
  ."Expiry time is " @' ReqValidUntil . ", this order will be void after that date." cr
} {
  -1 =: ReqValidUntil
  ."Expiry time is NOT set, if will be kept pending forever." cr
} cond

."Body of transfer message is " TransferBody <s csr. cr
  
// Create actual message to be sent when the order will be completed
<b
  b{01} s, BounceFlag 1 i, b{000100} s, DestAddr addr, Amount Gram, 0 9 64 32 + + 1+ u, 
  TransferBody <s 2dup s-fits? not rot over 1 i, -rot { drop TransferBody ref, } { s, } cond
b> =: IntMessage

// Pack the internal message into a request data structure to be signed
SeqNo ReqValidUntil SendMode IntMessage order-request() =: Request

."Signing order request: " Request <s csr. cr

WalletAddr null
  SeqNo -1 PrimaryPublicKey false Request Keypairs order-message() PrimaryPrivateKey sign-message()
external-message() =: ExtMessage

."New order external message: " ExtMessage <s csr. cr
ExtMessage 2 boc+>B dup Bx. cr
SaveFile +".boc" tuck B>file
."(Saved to file " type .")" cr